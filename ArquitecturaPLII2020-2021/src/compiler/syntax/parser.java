
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 08 12:57:37 CET 2021
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 08 12:57:37 CET 2021
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\004\000\002\062\002\000\002\002" +
    "\004\000\002\003\003\000\002\004\002\000\002\005\007" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\007\004\000\002\007\003\000\002" +
    "\010\016\000\002\010\003\000\002\011\003\000\002\011" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\013\004\000\002\013\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\025\004\000\002" +
    "\025\003\000\002\014\007\000\002\014\003\000\002\016" +
    "\005\000\002\016\003\000\002\016\003\000\002\017\004" +
    "\000\002\017\003\000\002\021\003\000\002\021\003\000" +
    "\002\022\003\000\002\022\003\000\002\034\021\000\002" +
    "\035\023\000\002\036\003\000\002\036\003\000\002\020" +
    "\004\000\002\020\003\000\002\023\004\000\002\023\003" +
    "\000\002\024\015\000\002\026\005\000\002\026\005\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\027\005\000\002\027\003\000\002\030\005" +
    "\000\002\030\005\000\002\030\003\000\002\031\004\000" +
    "\002\031\003\000\002\032\005\000\002\032\005\000\002" +
    "\033\006\000\002\041\003\000\002\041\003\000\002\042" +
    "\006\000\002\060\003\000\002\037\003\000\002\040\006" +
    "\000\002\061\004\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\047\004" +
    "\000\002\047\003\000\002\050\004\000\002\050\003\000" +
    "\002\051\013\000\002\052\013\000\002\054\005\000\002" +
    "\054\003\000\002\053\005\000\002\053\003\000\002\055" +
    "\015\000\002\056\015\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\044\007\000\002\057\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\004\011\000\001\002\000\004\002\353\001" +
    "\002\000\004\011\010\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\ufffe\001\002\000\004\024\011\001\002\000" +
    "\004\052\012\001\002\000\014\027\ufffd\041\ufffd\042\ufffd" +
    "\045\014\050\ufffd\001\002\000\012\027\ufffd\041\ufffd\042" +
    "\030\050\ufffd\001\002\000\014\024\017\027\ufffd\041\ufffd" +
    "\042\ufffd\050\ufffd\001\002\000\012\027\ufff6\041\ufff6\042" +
    "\ufff6\050\ufff6\001\002\000\012\027\ufff7\041\ufff7\042\ufff7" +
    "\050\ufff7\001\002\000\004\055\021\001\002\000\012\027" +
    "\ufffb\041\ufffb\042\ufffb\050\ufffb\001\002\000\010\031\025" +
    "\035\023\047\022\001\002\000\004\053\ufff8\001\002\000" +
    "\004\053\ufff9\001\002\000\004\053\026\001\002\000\004" +
    "\053\ufffa\001\002\000\014\024\017\027\ufffd\041\ufffd\042" +
    "\ufffd\050\ufffd\001\002\000\012\027\ufffc\041\ufffc\042\ufffc" +
    "\050\ufffc\001\002\000\012\024\336\027\ufffd\041\ufffd\050" +
    "\ufffd\001\002\000\010\027\034\041\ufffd\050\ufffd\001\002" +
    "\000\010\027\uffed\041\uffed\050\uffed\001\002\000\006\041" +
    "\127\050\ufffd\001\002\000\030\007\050\021\055\024\045" +
    "\031\052\032\053\033\036\035\037\041\ufffd\047\051\050" +
    "\ufffd\052\ufffd\001\002\000\006\041\uffe1\050\uffe1\001\002" +
    "\000\020\007\050\021\055\024\045\031\052\033\036\035" +
    "\037\047\051\001\002\000\032\004\uffcf\006\uffcf\023\uffcf" +
    "\025\uffcf\034\uffcf\037\uffcf\040\uffcf\043\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\054\uffcf\001\002\000\006\041\uffe2\050\uffe2" +
    "\001\002\000\004\052\114\001\002\000\022\025\071\034" +
    "\uffe8\037\072\040\067\043\uffe8\051\066\052\uffe8\054\070" +
    "\001\002\000\032\004\uffc4\006\uffc4\023\uffc4\025\uffc4\034" +
    "\uffc4\037\uffc4\040\uffc4\043\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\001\002\000\032\004\uffc6\006\uffc6\023\uffc6\025" +
    "\uffc6\034\uffc6\037\uffc6\040\uffc6\043\uffc6\051\uffc6\052\uffc6" +
    "\053\uffc6\054\uffc6\001\002\000\036\004\uffd1\006\uffd1\021" +
    "\103\023\uffd1\025\uffd1\033\102\034\uffd1\037\uffd1\040\uffd1" +
    "\043\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\001\002\000" +
    "\032\004\uffc9\006\uffc9\023\uffc9\025\uffc9\034\uffc9\037\uffc9" +
    "\040\uffc9\043\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\001" +
    "\002\000\032\004\uffcb\006\uffcb\023\uffcb\025\uffcb\034\uffcb" +
    "\037\uffcb\040\uffcb\043\uffcb\051\uffcb\052\uffcb\053\uffcb\054" +
    "\uffcb\001\002\000\020\007\050\021\055\024\045\031\052" +
    "\033\036\035\037\047\051\001\002\000\032\004\uffcc\006" +
    "\uffcc\023\uffcc\025\uffcc\034\uffcc\037\uffcc\040\uffcc\043\uffcc" +
    "\051\uffcc\052\uffcc\053\uffcc\054\uffcc\001\002\000\032\004" +
    "\uffce\006\uffce\023\uffce\025\uffce\034\uffce\037\uffce\040\uffce" +
    "\043\uffce\051\uffce\052\uffce\053\uffce\054\uffce\001\002\000" +
    "\004\024\100\001\002\000\032\004\uffd0\006\uffd0\023\uffd0" +
    "\025\uffd0\034\uffd0\037\uffd0\040\uffd0\043\uffd0\051\uffd0\052" +
    "\uffd0\053\uffd0\054\uffd0\001\002\000\020\007\050\021\055" +
    "\024\045\031\052\033\036\035\037\047\051\001\002\000" +
    "\010\034\uffe4\043\061\052\uffe4\001\002\000\032\004\uffcd" +
    "\006\uffcd\023\uffcd\025\uffcd\034\uffcd\037\uffcd\040\uffcd\043" +
    "\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\001\002\000\012" +
    "\034\uffe6\041\uffe6\050\uffe6\052\uffe3\001\002\000\026\007" +
    "\050\021\055\024\045\031\052\032\053\033\036\034\ufffd" +
    "\035\037\047\051\052\ufffd\001\002\000\006\034\uffe5\052" +
    "\uffe5\001\002\000\006\034\uffe3\052\uffe3\001\002\000\016" +
    "\023\065\025\071\037\072\040\067\051\066\054\070\001" +
    "\002\000\032\004\uffc2\006\uffc2\023\uffc2\025\uffc2\034\uffc2" +
    "\037\uffc2\040\uffc2\043\uffc2\051\uffc2\052\uffc2\053\uffc2\054" +
    "\uffc2\001\002\000\020\007\050\021\055\024\045\031\052" +
    "\033\036\035\037\047\051\001\002\000\020\007\050\021" +
    "\055\024\045\031\052\033\036\035\037\047\051\001\002" +
    "\000\020\007\050\021\055\024\045\031\052\033\036\035" +
    "\037\047\051\001\002\000\020\007\050\021\055\024\045" +
    "\031\052\033\036\035\037\047\051\001\002\000\020\007" +
    "\050\021\055\024\045\031\052\033\036\035\037\047\051" +
    "\001\002\000\032\004\uffc7\006\uffc7\023\uffc7\025\uffc7\034" +
    "\uffc7\037\uffc7\040\uffc7\043\uffc7\051\uffc7\052\uffc7\053\uffc7" +
    "\054\uffc7\001\002\000\032\004\uffd2\006\uffd2\023\uffd2\025" +
    "\uffd2\034\uffd2\037\uffd2\040\uffd2\043\uffd2\051\uffd2\052\uffd2" +
    "\053\uffd2\054\uffd2\001\002\000\032\004\uffd3\006\uffd3\023" +
    "\uffd3\025\uffd3\034\uffd3\037\uffd3\040\uffd3\043\uffd3\051\uffd3" +
    "\052\uffd3\053\uffd3\054\uffd3\001\002\000\032\004\uffca\006" +
    "\uffca\023\uffca\025\uffca\034\uffca\037\uffca\040\uffca\043\uffca" +
    "\051\uffca\052\uffca\053\uffca\054\uffca\001\002\000\032\004" +
    "\uffc8\006\uffc8\023\uffc8\025\uffc8\034\uffc8\037\uffc8\040\uffc8" +
    "\043\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\001\002\000" +
    "\010\034\uffe9\043\uffe9\052\uffe9\001\002\000\032\004\uffc5" +
    "\006\uffc5\023\uffc5\025\uffc5\034\uffc5\037\uffc5\040\uffc5\043" +
    "\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\001\002\000\024" +
    "\007\050\021\055\024\045\031\052\032\053\033\036\034" +
    "\ufffd\035\037\047\051\001\002\000\006\024\107\047\104" +
    "\001\002\000\006\004\ufff1\023\ufff1\001\002\000\006\004" +
    "\uffef\023\uffef\001\002\000\004\023\110\001\002\000\010" +
    "\004\ufff0\021\103\023\ufff0\001\002\000\034\004\uffc1\006" +
    "\uffc1\023\uffc1\025\uffc1\034\uffc1\037\uffc1\040\uffc1\043\uffc1" +
    "\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\001\002\000" +
    "\004\034\113\001\002\000\004\034\uffbc\001\002\000\032" +
    "\004\uffbb\006\uffbb\023\uffbb\025\uffbb\034\uffbb\037\uffbb\040" +
    "\uffbb\043\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\001\002" +
    "\000\010\012\117\016\120\024\115\001\002\000\034\007" +
    "\uffea\021\uffea\024\uffea\031\uffea\032\uffea\033\uffea\034\uffea" +
    "\035\uffea\041\uffea\047\uffea\050\uffea\052\uffea\053\uffea\001" +
    "\002\000\034\007\ufffd\021\ufffd\024\ufffd\031\ufffd\032\ufffd" +
    "\033\ufffd\034\ufffd\035\ufffd\041\ufffd\047\ufffd\050\ufffd\052" +
    "\ufffd\053\121\001\002\000\034\007\uffeb\021\uffeb\024\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\041\uffeb\047" +
    "\uffeb\050\uffeb\052\uffeb\053\uffeb\001\002\000\034\007\uffec" +
    "\021\uffec\024\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035" +
    "\uffec\041\uffec\047\uffec\050\uffec\052\uffec\053\uffec\001\002" +
    "\000\032\007\uffe0\021\uffe0\024\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\041\uffe0\047\uffe0\050\uffe0\052\uffe0" +
    "\001\002\000\032\007\050\021\055\024\045\031\052\032" +
    "\053\033\036\034\ufffd\035\037\041\ufffd\047\051\050\ufffd" +
    "\052\ufffd\001\002\000\032\007\uffdf\021\uffdf\024\uffdf\031" +
    "\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\041\uffdf\047\uffdf" +
    "\050\uffdf\052\uffdf\001\002\000\010\034\uffe7\041\uffe7\050" +
    "\uffe7\001\002\000\016\025\071\034\126\037\072\040\067" +
    "\051\066\054\070\001\002\000\032\004\uffc3\006\uffc3\023" +
    "\uffc3\025\uffc3\034\uffc3\037\uffc3\040\uffc3\043\uffc3\051\uffc3" +
    "\052\uffc3\053\uffc3\054\uffc3\001\002\000\010\014\221\022" +
    "\217\050\ufffd\001\002\000\004\050\uffd5\001\002\000\004" +
    "\050\132\001\002\000\014\013\ufffd\015\133\017\140\024" +
    "\137\046\141\001\002\000\004\024\205\001\002\000\016" +
    "\013\uffb9\015\uffb9\017\uffb9\024\uffb9\026\uffb9\046\uffb9\001" +
    "\002\000\004\013\203\001\002\000\016\013\ufffd\015\133" +
    "\017\140\024\137\026\ufffd\046\141\001\002\000\010\021" +
    "\103\033\102\055\uffc0\001\002\000\020\007\050\021\055" +
    "\024\045\031\052\033\036\035\037\047\051\001\002\000" +
    "\004\033\157\001\002\000\004\055\153\001\002\000\016" +
    "\013\uffb6\015\uffb6\017\uffb6\024\uffb6\026\uffb6\046\uffb6\001" +
    "\002\000\016\013\uffb7\015\uffb7\017\uffb7\024\uffb7\026\uffb7" +
    "\046\uffb7\001\002\000\016\013\uffb8\015\uffb8\017\uffb8\024" +
    "\uffb8\026\uffb8\046\uffb8\001\002\000\006\013\uffad\026\uffad" +
    "\001\002\000\004\053\152\001\002\000\004\055\uffbf\001" +
    "\002\000\016\013\uffb5\015\uffb5\017\uffb5\024\uffb5\026\uffb5" +
    "\046\uffb5\001\002\000\020\010\uffba\013\uffba\015\uffba\017" +
    "\uffba\024\uffba\026\uffba\046\uffba\001\002\000\020\007\050" +
    "\021\055\024\045\031\052\033\036\035\037\047\051\001" +
    "\002\000\004\053\156\001\002\000\016\025\071\037\072" +
    "\040\067\051\066\053\uffbd\054\070\001\002\000\020\010" +
    "\uffbe\013\uffbe\015\uffbe\017\uffbe\024\uffbe\026\uffbe\046\uffbe" +
    "\001\002\000\024\007\050\021\055\024\045\030\160\031" +
    "\052\033\036\034\ufffd\035\037\047\051\001\002\000\004" +
    "\034\uffa2\001\002\000\016\025\071\034\uffa1\037\072\040" +
    "\067\051\066\054\070\001\002\000\004\034\164\001\002" +
    "\000\004\034\uffa0\001\002\000\004\053\165\001\002\000" +
    "\020\010\uff9f\013\uff9f\015\uff9f\017\uff9f\024\uff9f\026\uff9f" +
    "\046\uff9f\001\002\000\016\006\167\025\071\037\072\040" +
    "\067\051\066\054\070\001\002\000\004\052\170\001\002" +
    "\000\016\013\ufffd\015\133\017\140\024\137\026\ufffd\046" +
    "\141\001\002\000\006\013\ufffd\026\173\001\002\000\004" +
    "\013\177\001\002\000\004\052\175\001\002\000\004\013" +
    "\uffa5\001\002\000\014\013\ufffd\015\133\017\140\024\137" +
    "\046\141\001\002\000\004\013\uffa6\001\002\000\004\017" +
    "\200\001\002\000\004\053\201\001\002\000\016\013\uffaa" +
    "\015\uffaa\017\uffaa\024\uffaa\026\uffaa\046\uffaa\001\002\000" +
    "\006\013\uffae\026\uffae\001\002\000\004\044\204\001\002" +
    "\000\004\002\uffd4\001\002\000\004\036\206\001\002\000" +
    "\020\007\050\021\055\024\045\031\052\033\036\035\037" +
    "\047\051\001\002\000\016\004\210\025\071\037\072\040" +
    "\067\051\066\054\070\001\002\000\020\007\050\021\055" +
    "\024\045\031\052\033\036\035\037\047\051\001\002\000" +
    "\016\025\071\037\072\040\067\051\066\052\212\054\070" +
    "\001\002\000\014\013\ufffd\015\133\017\140\024\137\046" +
    "\141\001\002\000\004\013\214\001\002\000\004\015\215" +
    "\001\002\000\004\053\216\001\002\000\016\013\uffa4\015" +
    "\uffa4\017\uffa4\024\uffa4\026\uffa4\046\uffa4\001\002\000\004" +
    "\024\245\001\002\000\010\014\uffda\022\uffda\050\uffda\001" +
    "\002\000\004\024\227\001\002\000\004\050\uffd6\001\002" +
    "\000\010\014\uffd9\022\uffd9\050\uffd9\001\002\000\010\014" +
    "\221\022\217\050\ufffd\001\002\000\004\050\uffd7\001\002" +
    "\000\004\050\uffd8\001\002\000\004\033\230\001\002\000" +
    "\026\007\050\021\055\024\045\031\052\032\053\033\036" +
    "\034\ufffd\035\037\047\051\052\ufffd\001\002\000\004\034" +
    "\232\001\002\000\004\052\233\001\002\000\014\027\ufffd" +
    "\041\ufffd\042\ufffd\045\014\050\ufffd\001\002\000\012\027" +
    "\ufffd\041\ufffd\042\030\050\ufffd\001\002\000\010\027\034" +
    "\041\ufffd\050\ufffd\001\002\000\006\041\127\050\ufffd\001" +
    "\002\000\004\050\240\001\002\000\012\015\133\017\140" +
    "\024\137\046\141\001\002\000\014\013\ufffd\015\133\017" +
    "\140\024\137\046\141\001\002\000\004\013\243\001\002" +
    "\000\004\053\244\001\002\000\010\014\uffdc\022\uffdc\050" +
    "\uffdc\001\002\000\004\033\246\001\002\000\026\007\050" +
    "\021\055\024\045\031\052\032\053\033\036\034\ufffd\035" +
    "\037\047\051\052\ufffd\001\002\000\004\034\250\001\002" +
    "\000\004\052\251\001\002\000\010\012\256\016\255\024" +
    "\253\001\002\000\004\052\257\001\002\000\004\052\uffde" +
    "\001\002\000\004\052\uffdd\001\002\000\006\052\ufff3\053" +
    "\ufff3\001\002\000\006\052\ufff2\053\ufff2\001\002\000\014" +
    "\027\ufffd\041\ufffd\042\ufffd\045\014\050\ufffd\001\002\000" +
    "\012\027\ufffd\041\ufffd\042\030\050\ufffd\001\002\000\010" +
    "\027\034\041\ufffd\050\ufffd\001\002\000\006\041\127\050" +
    "\ufffd\001\002\000\004\050\264\001\002\000\014\010\275" +
    "\015\265\017\270\024\137\046\141\001\002\000\004\024" +
    "\323\001\002\000\020\010\uffb2\013\uffb2\015\uffb2\017\uffb2" +
    "\024\uffb2\026\uffb2\046\uffb2\001\002\000\020\010\uffb4\013" +
    "\uffb4\015\uffb4\017\uffb4\024\uffb4\026\uffb4\046\uffb4\001\002" +
    "\000\020\007\050\021\055\024\045\031\052\033\036\035" +
    "\037\047\051\001\002\000\020\010\uffaf\013\uffaf\015\uffaf" +
    "\017\uffaf\024\uffaf\026\uffaf\046\uffaf\001\002\000\020\010" +
    "\uffb3\013\uffb3\015\uffb3\017\uffb3\024\uffb3\026\uffb3\046\uffb3" +
    "\001\002\000\020\010\uffb1\013\uffb1\015\uffb1\017\uffb1\024" +
    "\uffb1\026\uffb1\046\uffb1\001\002\000\016\010\275\013\ufffd" +
    "\015\265\017\270\024\137\046\141\001\002\000\020\007" +
    "\050\021\055\024\045\031\052\033\036\035\037\047\051" +
    "\001\002\000\020\010\uffb0\013\uffb0\015\uffb0\017\uffb0\024" +
    "\uffb0\026\uffb0\046\uffb0\001\002\000\016\025\071\037\072" +
    "\040\067\051\066\053\300\054\070\001\002\000\020\010" +
    "\uff9e\013\uff9e\015\uff9e\017\uff9e\024\uff9e\026\uff9e\046\uff9e" +
    "\001\002\000\004\013\305\001\002\000\020\010\275\013" +
    "\ufffd\015\265\017\270\024\137\026\ufffd\046\141\001\002" +
    "\000\006\013\uffab\026\uffab\001\002\000\006\013\uffac\026" +
    "\uffac\001\002\000\004\053\306\001\002\000\010\014\uffdb" +
    "\022\uffdb\050\uffdb\001\002\000\016\006\310\025\071\037" +
    "\072\040\067\051\066\054\070\001\002\000\004\052\311" +
    "\001\002\000\020\010\275\013\ufffd\015\265\017\270\024" +
    "\137\026\ufffd\046\141\001\002\000\006\013\ufffd\026\313" +
    "\001\002\000\004\052\321\001\002\000\004\013\316\001" +
    "\002\000\004\013\uffa7\001\002\000\004\017\317\001\002" +
    "\000\004\053\320\001\002\000\020\010\uffa9\013\uffa9\015" +
    "\uffa9\017\uffa9\024\uffa9\026\uffa9\046\uffa9\001\002\000\016" +
    "\010\275\013\ufffd\015\265\017\270\024\137\046\141\001" +
    "\002\000\004\013\uffa8\001\002\000\004\036\324\001\002" +
    "\000\020\007\050\021\055\024\045\031\052\033\036\035" +
    "\037\047\051\001\002\000\016\004\326\025\071\037\072" +
    "\040\067\051\066\054\070\001\002\000\020\007\050\021" +
    "\055\024\045\031\052\033\036\035\037\047\051\001\002" +
    "\000\016\025\071\037\072\040\067\051\066\052\330\054" +
    "\070\001\002\000\016\010\275\013\ufffd\015\265\017\270" +
    "\024\137\046\141\001\002\000\004\013\332\001\002\000" +
    "\004\015\333\001\002\000\004\053\334\001\002\000\020" +
    "\010\uffa3\013\uffa3\015\uffa3\017\uffa3\024\uffa3\026\uffa3\046" +
    "\uffa3\001\002\000\010\027\uffee\041\uffee\050\uffee\001\002" +
    "\000\004\055\340\001\002\000\010\027\ufff4\041\ufff4\050" +
    "\ufff4\001\002\000\004\020\341\001\002\000\004\021\342" +
    "\001\002\000\006\024\107\047\104\001\002\000\004\004" +
    "\344\001\002\000\006\024\107\047\104\001\002\000\004" +
    "\023\346\001\002\000\004\005\347\001\002\000\006\012" +
    "\256\016\255\001\002\000\004\053\351\001\002\000\012" +
    "\024\336\027\ufffd\041\ufffd\050\ufffd\001\002\000\010\027" +
    "\ufff5\041\ufff5\050\ufff5\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\006\002\003\062\004\001\001\000\002\001" +
    "\001\000\006\003\005\024\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\014\007\012\001\001\000\006\004\031\013\030" +
    "\001\001\000\006\004\017\005\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\017" +
    "\005\026\001\001\000\002\001\001\000\006\004\336\010" +
    "\334\001\001\000\006\004\034\017\032\001\001\000\002" +
    "\001\001\000\006\004\127\023\130\001\001\000\030\004" +
    "\057\014\037\016\040\025\055\026\041\027\046\030\045" +
    "\031\043\032\042\033\056\040\053\001\001\000\002\001" +
    "\001\000\020\026\124\027\046\030\045\031\043\032\042" +
    "\033\056\040\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\026\100\027\046\030\045\031\043" +
    "\032\042\033\056\040\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\026\063\027\046\030\045\031\043\032\042\033\056\040" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\062\016\061\025\055\026\041\027" +
    "\046\030\045\031\043\032\042\033\056\040\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\026\076\027\046\030\045\031\043" +
    "\032\042\033\056\040\053\001\001\000\020\026\075\027" +
    "\046\030\045\031\043\032\042\033\056\040\053\001\001" +
    "\000\020\026\074\027\046\030\045\031\043\032\042\033" +
    "\056\040\053\001\001\000\020\026\073\027\046\030\045" +
    "\031\043\032\042\033\056\040\053\001\001\000\020\026" +
    "\072\027\046\030\045\031\043\032\042\033\056\040\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\062\016\111\025\055\026" +
    "\041\027\046\030\045\031\043\032\042\033\056\037\110" +
    "\040\053\001\001\000\006\012\105\033\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\115\001\001\000\002" +
    "\001\001\000\006\004\122\021\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\004\057" +
    "\014\123\016\040\025\055\026\041\027\046\030\045\031" +
    "\043\032\042\033\056\040\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\224\020\221\034\217\035\222\036\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\145\033" +
    "\147\040\146\041\141\042\133\044\142\045\135\047\134" +
    "\051\144\055\143\061\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\145\033\147" +
    "\040\146\041\141\042\133\044\142\045\135\047\201\051" +
    "\144\055\143\061\150\001\001\000\002\001\001\000\020" +
    "\026\165\027\046\030\045\031\043\032\042\033\056\040" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\026\154\027\046\030\045\031" +
    "\043\032\042\033\056\040\053\060\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\004" +
    "\162\026\160\027\046\030\045\031\043\032\042\033\056" +
    "\040\053\043\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\145\033\147\040\146\041\141\042\133\044\142" +
    "\045\135\047\170\051\144\055\143\061\150\001\001\000" +
    "\006\004\173\053\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\145\033\147\040" +
    "\146\041\141\042\133\044\142\045\135\047\175\051\144" +
    "\055\143\061\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\026\206\027\046\030\045\031\043\032\042\033\056" +
    "\040\053\001\001\000\002\001\001\000\020\026\210\027" +
    "\046\030\045\031\043\032\042\033\056\040\053\001\001" +
    "\000\002\001\001\000\030\004\145\033\147\040\146\041" +
    "\141\042\133\044\142\045\135\047\212\051\144\055\143" +
    "\061\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\224\020\225\034\217\035\222\036\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\057\014\230\016\040\025\055\026\041" +
    "\027\046\030\045\031\043\032\042\033\056\040\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\014" +
    "\007\233\001\001\000\006\004\031\013\234\001\001\000" +
    "\006\004\034\017\235\001\001\000\006\004\127\023\236" +
    "\001\001\000\002\001\001\000\024\033\147\040\146\041" +
    "\141\042\133\044\142\045\240\051\144\055\143\061\150" +
    "\001\001\000\030\004\145\033\147\040\146\041\141\042" +
    "\133\044\142\045\135\047\241\051\144\055\143\061\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\004\057\014\246\016\040" +
    "\025\055\026\041\027\046\030\045\031\043\032\042\033" +
    "\056\040\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\253\022\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\014\007\257\001\001\000\006\004" +
    "\031\013\260\001\001\000\006\004\034\017\261\001\001" +
    "\000\006\004\127\023\262\001\001\000\002\001\001\000" +
    "\026\033\147\040\146\041\141\042\266\044\272\046\273" +
    "\052\271\056\265\057\270\061\275\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\026\306" +
    "\027\046\030\045\031\043\032\042\033\056\040\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\004\302\033\147\040\146\041\141\042\266\044" +
    "\272\046\301\050\300\052\271\056\265\057\270\061\275" +
    "\001\001\000\020\026\276\027\046\030\045\031\043\032" +
    "\042\033\056\040\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\004" +
    "\302\033\147\040\146\041\141\042\266\044\272\046\301" +
    "\050\303\052\271\056\265\057\270\061\275\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\004" +
    "\302\033\147\040\146\041\141\042\266\044\272\046\301" +
    "\050\311\052\271\056\265\057\270\061\275\001\001\000" +
    "\006\004\314\054\313\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\004\302\033\147\040\146" +
    "\041\141\042\266\044\272\046\301\050\321\052\271\056" +
    "\265\057\270\061\275\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\026\324\027\046\030\045\031\043\032" +
    "\042\033\056\040\053\001\001\000\002\001\001\000\020" +
    "\026\326\027\046\030\045\031\043\032\042\033\056\040" +
    "\053\001\001\000\002\001\001\000\032\004\302\033\147" +
    "\040\146\041\141\042\266\044\272\046\301\050\330\052" +
    "\271\056\265\057\270\061\275\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\342\033\104\001" +
    "\001\000\002\001\001\000\006\012\344\033\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\347\001" +
    "\001\000\002\001\001\000\006\004\336\010\351\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sentenciaDevolver ::= FRETURN expresion DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaDevolver",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentenciaEscribir ::= ESCRIBIR PIZQUIERDO parametroEscribir PDERECHO DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribir",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parametroEscribir ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroEscribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // parametroEscribir ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroEscribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // parametroEscribir ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroEscribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentenciaforFuncion ::= COMIENZOBUCLEPARA IDEN RANGOBUCLEPARA expresion RANGO expresion DELIMFUNC listaSentenciasFuncion FINBLOQUESENTENCIAS COMIENZOBUCLEPARA DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaforFuncion",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentenciafor ::= COMIENZOBUCLEPARA IDEN RANGOBUCLEPARA expresion RANGO expresion DELIMFUNC listaSentencias FINBLOQUESENTENCIAS COMIENZOBUCLEPARA DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciafor",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // rellenoif ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rellenoif",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // rellenoif ::= ALTERNATIVASI DELIMFUNC listaSentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rellenoif",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // rellenoifFuncion ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rellenoifFuncion",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // rellenoifFuncion ::= ALTERNATIVASI DELIMFUNC listaSentenciasFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rellenoifFuncion",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentenciaifFuncion ::= COMIENZOSI expresion STARTIF DELIMFUNC listaSentenciasFuncion rellenoifFuncion FINBLOQUESENTENCIAS COMIENZOSI DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaifFuncion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentenciaif ::= COMIENZOSI expresion STARTIF DELIMFUNC listaSentencias rellenoif FINBLOQUESENTENCIAS COMIENZOSI DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaif",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // listaSentenciasFuncion ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentenciasFuncion",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // listaSentenciasFuncion ::= sentenciaFuncion listaSentenciasFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentenciasFuncion",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // listaSentencias ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentencias",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // listaSentencias ::= sentencia listaSentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentencias",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentenciaFuncion ::= sentenciaDevolver 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFuncion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentenciaFuncion ::= sentenciallamadafuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFuncion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentenciaFuncion ::= sentenciaEscribir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFuncion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentenciaFuncion ::= sentenciaforFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFuncion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentenciaFuncion ::= sentenciaifFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFuncion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentenciaFuncion ::= sentenciadeasignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFuncion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentencia ::= sentenciallamadafuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentencia ::= sentenciaEscribir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencia ::= sentenciafor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentencia ::= sentenciaif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentencia ::= sentenciadeasignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentenciallamadafuncion ::= llamadafuncion DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciallamadafuncion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // llamadafuncion ::= IDEN PIZQUIERDO parametrofuncionoproc PDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadafuncion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parametrofuncionoproc ::= listavariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrofuncionoproc",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parametroasignacion ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroasignacion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentenciadeasignacion ::= parteizquierdaasignacion ASIGNACION parametroasignacion DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciadeasignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parteizquierdaasignacion ::= miembrovector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteizquierdaasignacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parteizquierdaasignacion ::= IDEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteizquierdaasignacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // miembrovector ::= IDEN CIZQUIERDO valorango CDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("miembrovector",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresionlvl5 ::= CIZQUIERDO expresion CDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl5",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresionlvl5 ::= PIZQUIERDO expresion PDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl5",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresionlvl4 ::= expresionlvl5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl4",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresionlvl4 ::= NOLOGICO expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl4",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresionlvl3 ::= expresionlvl4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl3",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresionlvl3 ::= expresion PRODUCTO expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl3",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresionlvl3 ::= expresion YLOGICA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl3",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresionlvl2 ::= expresionlvl3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresionlvl2 ::= expresion SUMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= expresionlvl2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= miembrovector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= FALSO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= CIERTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= llamadafuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= IDEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= expresion IGUALDAD expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= expresion MENORQUE expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // defprincipal ::= COMIENZOPROGRAMA IDEN DELIMFUNC seccionconstantes secciontipos seccionvariables seccionsubprograma COMIENZO listaSentencias FINBLOQUESENTENCIAS FINPROGRAMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defprincipal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // seccionsubprograma ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionsubprograma",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // seccionsubprograma ::= COMIENZOSUBPROGRAMAS defsubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionsubprograma",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // defsubprograma ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defsubprograma",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // defsubprograma ::= selectorpof defsubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defsubprograma",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // selectorpof ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectorpof",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // selectorpof ::= procedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectorpof",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // funcion ::= DECLAREFUNCION IDEN PIZQUIERDO defvariables PDERECHO DELIMFUNC tiporetornofuncion DELIMFUNC seccionconstantes secciontipos seccionvariables seccionsubprograma COMIENZO sentenciaFuncion listaSentenciasFuncion FINBLOQUESENTENCIAS DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // procedimiento ::= COMIENZOPROCEDIMIENTO IDEN PIZQUIERDO defvariables PDERECHO DELIMFUNC seccionconstantes secciontipos seccionvariables seccionsubprograma COMIENZO sentencia listaSentencias FINBLOQUESENTENCIAS DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tiporetornofuncion ::= tipovector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tiporetornofuncion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tiporetornofuncion ::= IDEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tiporetornofuncion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // puntoycomaopcional ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("puntoycomaopcional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // puntoycomaopcional ::= DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("puntoycomaopcional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // seccionvariables ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionvariables",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // seccionvariables ::= DECLVARIABLES defvariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionvariables",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // listavariables ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listavariables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // listavariables ::= selectorvalororeferencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listavariables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // listavariables ::= selectorvalororeferencia DIDENTIFICADORES listavariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listavariables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // defvariables ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defvariables",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // defvariables ::= listavariables DELIMFUNC tipovariable puntoycomaopcional defvariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defvariables",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // selectorvalororeferencia ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectorvalororeferencia",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // selectorvalororeferencia ::= PARAMETROVALOR IDEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectorvalororeferencia",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipovariable ::= IDEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovariable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipovariable ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovariable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipovariable ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovariable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // secciontipos ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secciontipos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // secciontipos ::= COMIENZODECLTIPOS deftipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secciontipos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // valorango ::= miembrovector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorango",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // valorango ::= IDEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorango",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // valorango ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorango",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipovector ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovector",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipovector ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovector",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // deftipos ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("deftipos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // deftipos ::= IDEN ASIGNACION DECLVECTOR CIZQUIERDO valorango RANGO valorango CDERECHO ASIGNACIONVECTOR tipovector DSENTENCIAS deftipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("deftipos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // seccionconstantes ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionconstantes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // seccionconstantes ::= BCONSTANTES defconstantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionconstantes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // valorconstante ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorconstante",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // valorconstante ::= CIERTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorconstante",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // valorconstante ::= FALSO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorconstante",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // defconstantes ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defconstantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // defconstantes ::= IDEN ASIGNACION valorconstante DSENTENCIAS defconstantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defconstantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // epsilon ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("epsilon",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= defprincipal 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
  		// No modificar esta estructura, aunque se pueden añadir más acciones semánticas
  		
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);

  		// En caso de no comentarse las dos sentencias anteriores puede generar una excepcion
  		// en las llamadas a cupTest si el compilador no está completo. Esto es debido a que 
  		// aún no se tendrá implementada la generación de código intermedio ni final.
  		// Para la entrega final deberán descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

