package compiler.syntax;

// Declaración de importaciones 
//(No modificar las proporcionadas. Se pueden agregar mas)

import java_cup.runtime.Symbol;
import java.util.*;

import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;

import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

// Declaración del código de usuario

action code {:
	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();

:}	

parser code {:
	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}
:}

// Declaración de terminales

terminal Token RANGO;
terminal Token ASIGNACIONVECTOR;
terminal Token STARTIF;
terminal Token NOLOGICO;
terminal Token FRETURN;
terminal Token COMIENZOPROGRAMA;
terminal Token ENTERO;
terminal Token FINBLOQUESENTENCIAS;
terminal Token COMIENZOPROCEDIMIENTO;
terminal Token COMIENZOBUCLEPARA;
terminal Token BOOLEANO;
terminal Token COMIENZOSI;
terminal Token DECLVECTOR;
terminal Token CIZQUIERDO;
terminal Token DECLAREFUNCION;
terminal Token CDERECHO;
terminal Token IDEN;
terminal Token IGUALDAD;
terminal Token ALTERNATIVASI;
terminal Token DECLVARIABLES;
terminal Token STRING;
terminal Token FALSO;
terminal Token PARAMETROVALOR;
terminal Token PIZQUIERDO;
terminal Token PDERECHO;
terminal Token CIERTO;
terminal Token RANGOBUCLEPARA;
terminal Token PRODUCTO;
terminal Token SUMA;
terminal Token COMIENZOSUBPROGRAMAS;
terminal Token COMIENZODECLTIPOS;
terminal Token DIDENTIFICADORES;
terminal Token FINPROGRAMA;
terminal Token BCONSTANTES;
terminal Token ESCRIBIR;
terminal Token NUM;
terminal Token COMIENZO;
terminal Token YLOGICA;
terminal Token DELIMFUNC;
terminal Token DSENTENCIAS;
terminal Token MENORQUE;
terminal Token ASIGNACION;




// Declaración de no terminales


non terminal  					program;
non terminal Axiom				axiom;
non terminal  					epsilon;
non terminal  					defconstantes;
non terminal Constante 			valorconstante;
non terminal  					seccionconstantes;
non terminal Vect				deftipos;
non terminal TipoVector			tipovector;
non terminal Constante			valorango;
non terminal  					secciontipos;
non terminal SecuenciaVariables	defvariables;
non terminal Var				tipovariable;
non terminal SecuenciaVariables	listavariables;
non terminal SecuenciaVariables	seccionvariables;
non terminal  					defsubprograma;
non terminal					puntoycomaopcional;

non terminal Var				tiporetornofuncion;
non terminal  					seccionsubprograma;
non terminal  					defprincipal;
non terminal Var				selectorvalororeferencia;


non terminal Expresion			expresion;
non terminal Expresion			expresionlvl2;
non terminal Expresion			expresionlvl3;
non terminal Expresion			expresionlvl4;
non terminal Expresion			expresionlvl5;




non terminal Expresion			miembrovector;
non terminal 					procedimiento;
non terminal					funcion;
non terminal					selectorpof;

non terminal SecuenciaVariables parametrofuncionoproc;
non terminal Expresion			llamadafuncion ; 

non terminal Expresion			parteizquierdaasignacion;  
non terminal Sentencia			sentenciadeasignacion;

non terminal Expresion			parametroEscribir ;
non terminal Sentencia			sentenciaEscribir ;

non terminal Sentencia			sentencia;
non terminal Sentencia			sentenciaFuncion;
non terminal ListaSentencias	listaSentencias;
non terminal ListaSentencias	listaSentenciasFuncion;
non terminal Sentencia			sentenciaif;
non terminal Sentencia			sentenciaifFuncion;
non terminal Sentencia 			rellenoif;
non terminal Sentencia			rellenoifFuncion;
non terminal Sentencia			sentenciafor;
non terminal Sentencia			sentenciaforFuncion;
non terminal Sentencia			sentenciaDevolver;


non terminal Expresion			parametroasignacion;

non terminal					sentenciallamadafuncion;





// Declaración de relaciones de precedencia
precedence left		PIZQUIERDO, PDERECHO, YLOGICA, MENORQUE, IGUALDAD, CIZQUIERDO, CDERECHO, SUMA, PRODUCTO;	
precedence right	NOLOGICO;

// Declaración de reglas de producción

start with program;

program ::= 
  {: 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   :}
  axiom:ax
  {: 
  		// No modificar esta estructura, aunque se pueden aï¿½adir mï¿½s acciones semï¿½nticas
  		
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);

  		// En caso de no comentarse las dos sentencias anteriores puede generar una excepcion
  		// en las llamadas a cupTest si el compilador no estÃ¡ completo. Esto es debido a que 
  		// aÃºn no se tendrÃ¡ implementada la generaciÃ³n de cÃ³digo intermedio ni final.
  		// Para la entrega final deberÃ¡n descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   :};

axiom ::= defprincipal;

epsilon ::=;

// Definición de programa principal
defprincipal ::= COMIENZOPROGRAMA IDEN:id
{:
	//Creamos el ámbito global con el nombre del programa principal
	String nombre = id.getLexema();
	scopeManager.openScope(nombre);
	ScopeIF scope = scopeManager.getCurrentScope();
	
	//Obtenemos del ámbito creado la Tabla de Tipos
	TypeTableIF typeTable = scope.getTypeTable();
	
	//Introducción del Tipo Simple Entero o Integer y Lógico o Booleano
	TypeSimple tsEntero = new TypeSimple(scope, "ENTERO");
	typeTable.addType("ENTERO", tsEntero);
	TypeSimple tsLogico = new TypeSimple(scope, "LOGICO");
	typeTable.addType("LOGICO", tsLogico);
:} 
DELIMFUNC seccionconstantes secciontipos seccionvariables seccionsubprograma COMIENZO listaSentencias FINBLOQUESENTENCIAS FINPROGRAMA
{:
	scopeManager.closeScope();
:};

/*--------------------------------------------------------------------------*/
/*-------------------------------CONSTANTES---------------------------------*/
/*--------------------------------------------------------------------------*/

//Definición de constantes
defconstantes ::=   IDEN:id ASIGNACION valorconstante:valor DSENTENCIAS {:
	//Recuperamos el ámbito dinde nos encontramos y obtenemos la tabla de símbolos
	ScopeIF scope = scopeManager.getCurrentScope();
	SymbolTableIF symTable = scope.getSymbolTable();
	
	//Comprobamos que la constante no este ya contenida en la tabla de símmbolos
	if(symTable.containsSymbol(id.getLexema())){
		semanticErrorManager.semanticFatalError("Error en la declaracion de constantes en la linea " + id.getLine() + ". Simbolo " +id.getLexema() + " ya declarado");
	} else {
		//Introducimos en la tabla de símbolos la constante con su ámbito, nombre, tipo y valor
		SymbolConstant simboloConstante = new SymbolConstant(scope, id.getLexema(), valor.getType());
		simboloConstante.setValor(valor.getValor());
		symTable.addSymbol(simboloConstante);	
	}
:} defconstantes 
| epsilon;

//Devuelve un objeto constante con el campo type y el valor
valorconstante ::=   FALSO 
{:
	Constante c = new Constante(scopeManager.searchType("LOGICO"), "false");
	RESULT = c;							
:} 
| CIERTO 
{:
	Constante c = new Constante(scopeManager.searchType("LOGICO"), "true");
	System.out.println(scopeManager.searchType("LOGICO"));
	System.out.println(c.getType());
	RESULT = c;							
:}
| NUM:n
{:
	Constante c = new Constante(scopeManager.searchType("ENTERO"), n.getLexema());
	System.out.println(scopeManager.searchType("ENTERO"));
	System.out.println(c.getType());
	RESULT = c;							
:};

seccionconstantes ::= BCONSTANTES defconstantes | epsilon;

/*--------------------------------------------------------------------------*/
/*-------------------------------DEF TIPOS----------------------------------*/
/*--------------------------------------------------------------------------*/


// Definición de tipos (nombreTipo = vector [n1..n2] de TipoPrimitivo;)
deftipos ::=IDEN:id ASIGNACION DECLVECTOR CIZQUIERDO valorango:v1 RANGO valorango:v2 CDERECHO ASIGNACIONVECTOR tipovector:tipoV  DSENTENCIAS deftipos 
{:
	if (Integer.parseInt(v1.getValor()) > Integer.parseInt(v2.getValor())) {
		//Dar error
		semanticErrorManager.semanticFatalError("Error en la definición de tipos, parametros equivocados en el rango del vector");
	} else {
		//CREAR VECTOR CON PARAMETROS
		ScopeIF scope = scopeManager.getCurrentScope();
		TypeTableIF typeTable = scope.getTypeTable();
		
		if(typeTable.containsType(id.getLexema())){
			semanticErrorManager.semanticFatalError("El identificador "+id.getLexema()+ " en la línea "+id.getLine()+" ya está en uso");
		} else {
			TypeIF tipo = scopeManager.searchType(tipoV.getTipo());
			//Crear TypeArray
			TypeArray array = new TypeArray (scope, id.getLexema(), Integer.parseInt(v1.getValor()), Integer.parseInt(v2.getValor()), tipoV.getTipo());
			typeTable.addType(array);
		}
	}
:}
| epsilon;

tipovector ::= BOOLEANO 
{: 
	TipoVector tv = new TipoVector("LOGICO");
	RESULT = tv;
:} 
				
| ENTERO 
{: 
	TipoVector tv = new TipoVector("ENTERO");
	RESULT = tv;
:};

//[3]
valorango ::= NUM:n
{: 
	Constante c = new Constante(scopeManager.searchType("ENTERO"), n.getLexema());
	System.out.println(scopeManager.searchType("ENTERO"));
	System.out.println(c);
	RESULT = c;	
:} 

//[i]
| IDEN:r 
{:
	ScopeIF scope = scopeManager.getCurrentScope();
	SymbolTableIF sTable = scope.getSymbolTable();
	if (sTable.containsSymbol(r.getLexema())){
	
		//Si la tabla de símbolos contiene el símbolo
		SymbolIF simbolo = scopeManager.searchSymbol(r.getLexema());
		if (simbolo instanceof SymbolConstant) {
			SymbolConstant constante = (SymbolConstant) simbolo;
			if (simbolo.getType().getName().toString().equals("ENTERO")) {		
				Constante c = new Constante(scopeManager.searchType("ENTERO"), constante.getValor());
				RESULT = c;				
			} else {
				semanticErrorManager.semanticFatalError("Error fatal, el simbolo "+r.getLexema()+" no es de tipo ENTERO, necesario para el vector");
			}
		}
	} else {
		semanticErrorManager.semanticFatalError("Error fatal, el simbolo "+r.getLexema()+" no está definido");
	}
:}

//[v1[2]]
| miembrovector:r
{:
	Constante c = new Constante(r.getTipo(), r.getValor());
	RESULT = c;	
:};
secciontipos ::= COMIENZODECLTIPOS deftipos | epsilon; 

/*--------------------------------------------------------------------------*/
/*-------------------------------VARIABLES----------------------------------*/
/*--------------------------------------------------------------------------*/

// Definición de variables
tipovariable ::= BOOLEANO 
{: 
	System.out.println("Estoy en tipovariable BOOLEANO");
	Var v = new Var(scopeManager.searchType("LOGICO"));
	RESULT = v;
:} 
| ENTERO 
{: 
	System.out.println("Estoy en tipovariable ENTERO");
	Var v = new Var(scopeManager.searchType("ENTERO"));
	RESULT = v;
:} 
| IDEN:r
{: 	
	System.out.println("Estoy en tipovariable IDEN");
	Var v = new Var(r.getLexema());
	RESULT = v;
:} ;

//x, z : entero;
defvariables ::= listavariables:listaFila DELIMFUNC tipovariable:tipo puntoycomaopcional defvariables:listaAcum 
{:
	System.out.println("Estoy en defvariables");
	SecuenciaVariables sv = new SecuenciaVariables();	
	if (listaAcum == null){
		for (int i = 0; i < listaFila.size(); i++) {
			System.out.println("DEFVAR variable" + listaFila.getVariable(i) + " tipo: " + tipo);
			listaFila.getVariable(i).setType(tipo.getType());
			System.out.println("Seteo tipo de variable... " + listaFila.getVariable(i));
			sv.addVariable(listaFila.getVariable(i));
		}	
	} else {
		sv.setListaVariables(listaAcum.getListaVariables());
		for (int i = 0; i < listaFila.size(); i++) {
			listaFila.getVariable(i).setType(tipo.getType());
			sv.addVariable(listaFila.getVariable(i));
		}
	}
	RESULT = sv;		
:}

| epsilon; 

listavariables ::= selectorvalororeferencia:var DIDENTIFICADORES listavariables:lista
{:
	SecuenciaVariables sv = new SecuenciaVariables();
	sv.setListaVariables(lista.getListaVariables());
	sv.addVariable(var);
	RESULT = sv;
:} 
| selectorvalororeferencia:var
{:
	SecuenciaVariables sv = new SecuenciaVariables();
	sv.addVariable(var);
	RESULT = sv;
:} 

| epsilon ;


//Propaga el identificador de la variable
selectorvalororeferencia ::=  PARAMETROVALOR IDEN:id 
{:
	Var var = new Var (null, id.getLexema());
	RESULT = var;
:}
|expresion:ex
{:
	System.out.println("Estoy en expresion de selector valor referencia" + ex);
	//Si el tipo es null (es de tipo IDEN)
	if(ex.getType() == null){
		ScopeIF scope = scopeManager.getCurrentScope();
		SymbolTableIF symTable = scope.getSymbolTable();
		Var var  = new Var (null, ex.getValor());
		System.out.println("La variable creada en SVR/exp es " + var);
		RESULT = var;			
	} else {
		Var var = new Var (ex.getType(), ex.getValor());
		RESULT = var;
	}
:};

seccionvariables ::= DECLVARIABLES defvariables:lista
{:
	for (int i = 0; i < lista.size(); i++) {
		//Recuperamos el ámbito donde nos encontramos y obtenemos la tabla de símbolos
		ScopeIF scope = scopeManager.getCurrentScope();
		SymbolTableIF symTable = scope.getSymbolTable();		
		
		System.out.println("Estoy en SECCVAR " + lista.getVariable(i));
		System.out.println("Estoy en SECCVAR " + lista.getVariable(i).getType());
		System.out.println("Estoy en SECCVAR " + lista.getVariable(i).getValor());
		
		//Comprobamos que la variable no este ya contenida en la tabla de símbolos
		if(symTable.containsSymbol(lista.getVariable(i).getValor())){
			semanticErrorManager.semanticFatalError("Variable " + lista.getVariable(i).getValor() + " ya declarada");
		} else {				
			//Introducimos en la tabla de símbolos la variable con su ámbito, nombre, tipo y valor
			/*TypeTableIF typeTable = scope.getTypeTable();
			
			TypeIF type = scopeManager.searchType(lista.getVariable(i).getTipo());	*/
			
			if (lista.getVariable(i).getType() == null) {
				semanticErrorManager.semanticFatalError("Error al declarar la variable " + lista.getVariable(i).getValor() + " el tipo " 
				+ lista.getVariable(i).getTipo() + " no existe");
			} else {
				SymbolVariable simboloVariable = new SymbolVariable(scope, lista.getVariable(i).getValor(), lista.getVariable(i).getType());
				System.out.println(simboloVariable);
				symTable.addSymbol(simboloVariable);
			}			
		}		
	}
:} | epsilon;
puntoycomaopcional ::= DSENTENCIAS | epsilon;

/*--------------------------------------------------------------------------*/
/*------------------------------SUBPROGRAMAS--------------------------------*/
/*--------------------------------------------------------------------------*/
// Reglas de subprogramas
//procedimiento ejemplo (a : entero):
	//variables b,c: entero;
	//comienzo
		//c = a + 2;
		//b = a + c;
	//fin;
procedimiento ::= COMIENZOPROCEDIMIENTO IDEN:id 
{:
	ScopeIF scope = scopeManager.getCurrentScope();
	SymbolTableIF symTable = scope.getSymbolTable();
	TypeTableIF typeTable = scope.getTypeTable();
	
	if (typeTable.containsType(id.getLexema()) || symTable.containsSymbol(id.getLexema())) {	
		semanticErrorManager.semanticFatalError("Error al declarar el procedimiento "+id.getLexema()+", identificador en uso");	
    } else {   		
		// Crear Tipo y Simbolo de la Función
		TypeProcedure tipoProcedure = new TypeProcedure(scope, id.getLexema());		
		typeTable.addType(id.getLexema(), tipoProcedure);
		SymbolProcedure simboloProcedimiento = new SymbolProcedure(scope, id.getLexema(), typeTable.getType(id.getLexema()));
        
        symTable.addSymbol(id.getLexema(),simboloProcedimiento);
		
		//Abrir ámbito
		ScopeIF scopeF = scopeManager.openScope (id.getLexema());
    }	
:} 
PIZQUIERDO defvariables:lista
{:
	if (lista != null){
		for (int i = 0; i < lista.size(); i++) {
			//Recuperamos el ámbito donde nos encontramos y obtenemos la tabla de símbolos
			ScopeIF scope = scopeManager.getCurrentScope();
			SymbolTableIF symTable = scope.getSymbolTable();
			
			//Comprobamos que la variable no este ya contenida en la tabla de símbolos
			if(symTable.containsSymbol(lista.getVariable(i).getId())){
				semanticErrorManager.semanticFatalError("Parametro " + lista.getVariable(i).getId() + " con identificador en uso");
			} else {				
				//Introducimos en la tabla de símbolos la variable con su ámbito, nombre, tipo y valor
				TypeTableIF typeTable = scope.getTypeTable();
				TypeIF type = scopeManager.searchType(lista.getVariable(i).getTipo());			
							
				SymbolParameter parametro = new SymbolParameter(scope, lista.getVariable(i).getValor(), type);
				symTable.addSymbol(parametro);
							
				TypeProcedure procedimiento = (TypeProcedure)scopeManager.searchType(scope.getName());
				procedimiento.addParametro(parametro);
			}		
		}
	}
:} 
PDERECHO DELIMFUNC seccionconstantes secciontipos seccionvariables seccionsubprograma COMIENZO sentencia listaSentencias FINBLOQUESENTENCIAS DSENTENCIAS
{:
	scopeManager.closeScope();
:};


tiporetornofuncion ::= IDEN:id
{:	
	//Var v = new Var(id.getLexema(), id.getLexema());
	//RESULT = v;
:} 
| tipovector:tv
{:
	//Var v = new Var(tv.getTipo(), null);
	//RESULT = v;
:};

/*funcion funcion():entero:
	  			
		comienzo
			devolver 1;
		fin;
*/
funcion ::= DECLAREFUNCION IDEN:id 
{:
	ScopeIF scope = scopeManager.getCurrentScope();
	SymbolTableIF symTable = scope.getSymbolTable();
	TypeTableIF typeTable = scope.getTypeTable();
	
	if (typeTable.containsType(id.getLexema()) || symTable.containsSymbol(id.getLexema())) {	
		semanticErrorManager.semanticFatalError("Error al declarar la funcion "+id.getLexema()+", identificador en uso");	
    } else {   		
		// Crear Tipo y Simbolo de la Función
		TypeFunction tipoFuncion = new TypeFunction(scope, id.getLexema());		
		typeTable.addType(id.getLexema(), tipoFuncion);
		SymbolFunction simboloFuncion = new SymbolFunction(scope, id.getLexema(), typeTable.getType(id.getLexema()));
        
        symTable.addSymbol(id.getLexema(),simboloFuncion);
		
		//Abrir ámbito
		ScopeIF scopeF = scopeManager.openScope (id.getLexema());
    }	
:} 
PIZQUIERDO defvariables:lista PDERECHO DELIMFUNC tiporetornofuncion:tipo 
{:
	//Si la lista no está vacía
	if (lista != null){
		for (int i = 0; i < lista.size(); i++) {
			//Recuperamos el ámbito donde nos encontramos y obtenemos la tabla de símbolos
			ScopeIF scope = scopeManager.getCurrentScope();
			SymbolTableIF symTable = scope.getSymbolTable();
			
			//Comprobamos que la variable no este ya contenida en la tabla de símbolos
			if(symTable.containsSymbol(lista.getVariable(i).getId())){
				semanticErrorManager.semanticFatalError("Parametro " + lista.getVariable(i).getId() + " con identificador en uso");
			} else {				
				//Introducimos en la tabla de símbolos la variable con su ámbito, nombre, tipo y valor
				TypeTableIF typeTable = scope.getTypeTable();
				TypeIF type = scopeManager.searchType(lista.getVariable(i).getTipo());			
							
				SymbolParameter parametro = new SymbolParameter(scope, lista.getVariable(i).getValor(), type);
				symTable.addSymbol(parametro);	
				
				TypeFunction funcion = (TypeFunction)scopeManager.searchType(scope.getName());
				funcion.addParametro(parametro);
				funcion.setRetorno(tipo.getTipo());
			}		
		}
	}
:}  
DELIMFUNC seccionconstantes secciontipos seccionvariables seccionsubprograma COMIENZO sentenciaFuncion:s listaSentenciasFuncion:ls FINBLOQUESENTENCIAS DSENTENCIAS
{:
	scopeManager.closeScope();
:};

selectorpof ::= procedimiento | funcion ;
defsubprograma ::=selectorpof  defsubprograma | epsilon ;
seccionsubprograma ::=COMIENZOSUBPROGRAMAS  defsubprograma  | epsilon ;


/*--------------------------------------------------------------------------*/
/*------------------------------EXPRESIONES---------------------------------*/
/*--------------------------------------------------------------------------*/

// Expresiones
expresion ::=  expresion:exp1 MENORQUE expresion:exp2
{: 	
	if (exp1.getTipo() == null){
		semanticErrorManager.semanticFatalError("Error en la comparación menorque entre " + exp1.getValor() + " y " + exp2.getValor()
		+ ". El parametro " + exp1.getValor() + " no existe");
	}
	
	if (exp2.getTipo() == null){
		semanticErrorManager.semanticFatalError("Error en la comparación menorque entre " + exp1.getValor() + " y " + exp2.getValor()
		+ ". El parametro " + exp2.getValor() + " no existe");
	}
	
	if (exp1.getTipo().equals("ENTERO") && exp2.getTipo().equals("ENTERO")){
		Expresion ex = new Expresion("LOGICO", null);
		RESULT = ex;
	} else {
		semanticErrorManager.semanticFatalError("Error en los tipos de la expresion de comparación menorque. Los tipos son diferentes: " + exp1.getTipo() + " y " + exp2.getTipo());
	}
:} 
|  expresion:exp1 IGUALDAD expresion:exp2
{: 
	if (exp1.getTipo() == null){
		semanticErrorManager.semanticFatalError("Error en la igualdad entre " + exp1.getValor() + " y " + exp2.getValor()
		+ ". El parametro " + exp1.getValor() + " no existe");
	}
	
	if (exp2.getTipo() == null){
		semanticErrorManager.semanticFatalError("Error en la igualdad entre " + exp1.getValor() + " y " + exp2.getValor()
		+ ". El parametro " + exp2.getValor() + " no existe");
	}

	//Si los dos tipos son enteros
	if (exp1.getTipo().equals("ENTERO") && exp2.getTipo().equals("ENTERO")){
		Expresion ex = new Expresion("LOGICO", null);
		RESULT = ex;
	} else {
		semanticErrorManager.semanticFatalError("Error en los tipos de la expresion de igualdad. Los tipos son diferentes: " + exp1.getTipo() + " y " + exp2.getTipo());
	}

:} 
| IDEN:id
{: 
	//Creación objeto expresion
	Expresion exp = new Expresion();
	//Setea el valor
	exp.setValor(id.getLexema());
	
	//Si el símbolo existe
	if(scopeManager.containsSymbol(id.getLexema())){
		//Poner el tipo
		exp.setType(scopeManager.searchSymbol(id.getLexema()).getType());
	}			
	RESULT = exp;		
:}  
| llamadafuncion:exp
{: 
	RESULT = exp;
:} 
| CIERTO
{: 
	Expresion ex = new Expresion();
	ex.setValor("true");
	ex.setType(scopeManager.searchType("LOGICO"));
	RESULT = ex;
:}   
| FALSO
{: 
	Expresion ex = new Expresion();
	ex.setValor("false");
	ex.setType(scopeManager.searchType("LOGICO"));
	RESULT = ex;
:}   
| miembrovector:exp 
{:
	RESULT = exp;
:}
| NUM:num
{: 
	Expresion ex = new Expresion();
	ex.setValor(num.getLexema());
	ex.setType(scopeManager.searchType("ENTERO"));
	System.out.println("Estoy en EXP/NUM " + num.getLexema());
	
	System.out.println("Iniciando código intermedio...");
	
	//Recuperamos el ámbito en el que nos encontramos
	ScopeIF scope = scopeManager.getCurrentScope();
	
	//Creamos una factoría de temporales con su ámbito
	TemporalFactory tf = new TemporalFactory(scope);
	
	//Instanciamos el constructor del código intermedio con su ámbito
	IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scope);
	
	//Creamos un nuevo temporal
	TemporalIF temp = tf.create();
	
	//Creamos la cuadrupla que almacenará en un temporal el valor del entero
	int numeroEntero = Integer.parseInt(num.getLexema());
	cb.addQuadruple("MV", temp, numeroEntero);
	
	//Añadimos el temporal creado al objeto de la clase Expresion
	ex.setTemporal(temp);
	
	//Añadimos el código intermedio generado al objeto de la clase Expresion
	ex.setIntermediateCode(cb.create());
	
	//Printamos el código intermedio generado (opcional)
	System.out.println("Codigo intermedio: " + ex.getIntermediateCode());
	
	RESULT = ex;
:}    
| expresionlvl2:exp
{:
	RESULT = exp;
:} ;
expresionlvl2 ::=  expresion:exp1 SUMA expresion:exp2 
{:
	if (exp1.getTipo() == null){
		semanticErrorManager.semanticFatalError("Error en la suma entre " + exp1.getValor() + " y " + exp2.getValor()
		+ ". El parametro " + exp1.getValor() + " no existe");
	}
	
	if (exp2.getTipo() == null){
		semanticErrorManager.semanticFatalError("Error en la suma entre " + exp1.getValor() + " y " + exp2.getValor()
		+ ". El parametro " + exp2.getValor() + " no existe");
	}

	//Si los dos tipos son enteros
	if (exp1.getTipo().equals("ENTERO") && exp2.getTipo().equals("ENTERO")){
		Expresion ex = new Expresion("ENTERO", null);
		RESULT = ex;
	} else {
		semanticErrorManager.semanticFatalError("Error en los tipos de la expresion de suma. Los tipos son diferentes: " + exp1.getTipo() + " y " + exp2.getTipo());
	}
:}
| expresionlvl3:exp
{:
	RESULT = exp;
:};

expresionlvl3 ::=  expresion:exp1 YLOGICA expresion:exp2
{:
	if (exp1.getTipo() == null){
		exp1.setTipo(scopeManager.searchSymbol(exp1.getValor()).getType().getName());
	}
	
	if (exp2.getTipo() == null){
		exp2.setTipo(scopeManager.searchSymbol(exp2.getValor()).getType().getName());
	}
	
	if (exp1.getTipo().equals("LOGICO") && exp2.getTipo().equals("LOGICO")){
		Expresion ex = new Expresion("LOGICO", null);
		RESULT = ex;
	} else {
		semanticErrorManager.semanticFatalError("Error en los tipos de la expresion de conjunción lógica. Los tipos son diferentes: " + exp1.getTipo() + " y " + exp2.getTipo());
	}
:} 
|  expresion:exp1 PRODUCTO expresion:exp2 
{:
	if (exp1.getTipo() == null){
		exp1.setTipo(scopeManager.searchSymbol(exp1.getValor()).getType().getName());
	}
	
	if (exp2.getTipo() == null){
		exp2.setTipo(scopeManager.searchSymbol(exp2.getValor()).getType().getName());
	}

	//Si los dos tipos son enteros
	if (exp1.getTipo().equals("ENTERO") && exp2.getTipo().equals("ENTERO")){
		Expresion ex = new Expresion("ENTERO", null);
		RESULT = ex;
	} else {
		semanticErrorManager.semanticFatalError("Error en los tipos de la expresion de producto. Los tipos son diferentes: " + exp1.getTipo() + " y " + exp2.getTipo());
	}
:}
| expresionlvl4:exp
{:
	RESULT = exp;
:};

expresionlvl4 ::= NOLOGICO  expresion:exp
{:
	if (exp.getTipo() == null){
		exp.setTipo(scopeManager.searchSymbol(exp.getValor()).getType().getName());
	}
	
	if (exp.getTipo().equals("LOGICO")){
		RESULT = exp;
	} else {
		semanticErrorManager.semanticFatalError("Error en la negación. La expresion negada no es de tipo lógico");
	}
:} | expresionlvl5:exp
{:
	RESULT = exp;
:};

expresionlvl5 ::= PIZQUIERDO expresion:exp PDERECHO
{:
	RESULT = exp;
:} 
| CIZQUIERDO expresion:exp CDERECHO
{:
	RESULT = exp;
:};

// Acceso a vectores
//v1[2]
miembrovector::= IDEN:id CIZQUIERDO valorango:valor CDERECHO
{: 
	if(scopeManager.searchSymbol(id.getLexema()) == null) {
		semanticErrorManager.semanticFatalError("El vector " + id.getLexema() + " no está declarado");	
	} else {
		TypeArray array = (TypeArray) scopeManager.searchSymbol(id.getLexema()).getType(); 	
		Expresion ex = new Expresion (array.getTipo(), id.getLexema());
		RESULT = ex;
	}
:};
 
/*--------------------------------------------------------------------------*/
/*------------------------------ASIGNACION----------------------------------*/
/*--------------------------------------------------------------------------*/ 
 
//i = 3 + 7; 
// Sentencias de asignacion
parteizquierdaasignacion ::= IDEN:id
{:
	//Si la parte izquierda de la asignación no existe, devolver error
	if(scopeManager.searchSymbol(id.getLexema()) == null) {
		semanticErrorManager.semanticFatalError("La referencia " + id.getLexema() + " no está declarada");	
	} else {
		Expresion ex = new Expresion (scopeManager.searchSymbol(id.getLexema()).getType(), id.getLexema());
		RESULT = ex;
	}
	
:}  
|miembrovector:exp
{:
	RESULT = exp;	
:};

sentenciadeasignacion ::= parteizquierdaasignacion:ref ASIGNACION parametroasignacion:exp DSENTENCIAS
{:
	System.out.println(" Estoy en ASIGNACIÓN, REF = " + ref + ", EXP = " + exp );
	ScopeIF scope = scopeManager.getCurrentScope();
	//Comprobación que la referencia existe en las tablas de símbolos de los ámbitos abiertos 
	//y que es una variable o parámetro de subprograma
	if((scopeManager.containsSymbol(ref.getValor()))&&((scopeManager.searchSymbol(ref.getValor())instanceof SymbolVariable) || (scopeManager.searchSymbol(ref.getValor())instanceof SymbolParameter))){
		if(ref.getType().equals(exp.getType())){
			Sentencia s = new Sentencia();
			RESULT = s;				
		} else {
			semanticErrorManager.semanticFatalError("El tipo de " +ref.getValor()+ " y de " +exp.getValor()+" son incompatibles");
		}
	} else {
		semanticErrorManager.semanticFatalError("La referencia " + ref.getValor()+ " no está declarada");
	}
:}; 

parametroasignacion ::= expresion:ex
{:
	System.out.println("Estoy en el parámetro de la expresión " + ex.getValor() + " con type " + ex.getType());
	if (ex.getType() == null){
		semanticErrorManager.semanticFatalError("El parametro de asignacion " + ex.getValor()+ " no está declarada");
	} else {
		RESULT = ex;
	}
:};

// Llamada a función
parametrofuncionoproc ::= listavariables:lista
{:
	RESULT = lista;
:};

//ejFuncion (x)
llamadafuncion ::= IDEN:id PIZQUIERDO parametrofuncionoproc:parametros PDERECHO
{:
	TypeProcedure funcion = (TypeProcedure) (scopeManager.searchType(id.getLexema()));

	if (funcion.getListaParametros().size() == parametros.size()){	
		for (int i = 0; i < parametros.size(); i++) {
			if(parametros.getListaVariables().get(i).getTipo() == null){
				parametros.getListaVariables().get(i).setTipo(scopeManager.searchSymbol(parametros.getListaVariables().get(i).getValor()).getType().getName());
			}

			if(funcion.getListaParametros().get(i).getType().getName() == parametros.getListaVariables().get(i).getTipo()){
				System.out.println("Estoy en llamadafuncion");
			} else {
				semanticErrorManager.semanticFatalError("Los tipos de los parámetros en la llamada a " + id.getLexema() + " no coinciden: tipo en la llamada: " 
				+ parametros.getListaVariables().get(i).getTipo() + " tipo requerido: " + funcion.getListaParametros().get(i).getType().getName());
			}	
		}		
	} else {
		semanticErrorManager.semanticFatalError("El número de los parámetros es diferente de los esperados, esperados: " + funcion.getListaParametros().size() + " introducidos " + parametros.size());
	}
	TypeFunction fun = (TypeFunction) scopeManager.searchType(id.getLexema());
	Expresion ex = new Expresion(fun.getRetorno(), null);
	RESULT = ex;
:}; 
 
sentenciallamadafuncion ::= llamadafuncion DSENTENCIAS;


// Sentencias
sentencia ::= sentenciadeasignacion
| sentenciaif
| sentenciafor
| sentenciaEscribir
| sentenciallamadafuncion;

sentenciaFuncion ::= sentenciadeasignacion
| sentenciaifFuncion:siff 
{:	
	RESULT = siff;
:}
| sentenciaforFuncion
| sentenciaEscribir:sef
{:	
	RESULT = sef;
:}
| sentenciallamadafuncion
| sentenciaDevolver:sd
{:	
	RESULT = sd;
:};

listaSentencias ::= sentencia  listaSentencias | epsilon;

listaSentenciasFuncion ::= sentenciaFuncion:sf listaSentenciasFuncion:lsf
{:
	ListaSentencias lista = new ListaSentencias();
	
	if (lsf == null){
		lista.addSentencia(sf);
		RESULT = lista;
	} else {
		lsf.setListaSentencias(lsf.getListaSentencias());
		lsf.addSentencia(sf);
		RESULT = lsf;
	}
	
:} | epsilon;

// if
sentenciaif ::= COMIENZOSI expresion:exp STARTIF DELIMFUNC listaSentencias rellenoif FINBLOQUESENTENCIAS COMIENZOSI DSENTENCIAS
{:	
	if(exp.getTipo().equals("LOGICO")){
		Sentencia s = new Sentencia();
		RESULT = s;
	} else {
		semanticErrorManager.semanticFatalError("Error en la expresión, debe ser de tipo lógico y es de tipo: " + exp.getTipo());
	}
	
:};
sentenciaifFuncion ::= COMIENZOSI expresion:exp  STARTIF DELIMFUNC listaSentenciasFuncion rellenoifFuncion  FINBLOQUESENTENCIAS COMIENZOSI DSENTENCIAS 
{:	
	if(exp.getTipo().equals("LOGICO")){
		Sentencia s = new Sentencia();
		RESULT = s;
	} else {
		semanticErrorManager.semanticFatalError("Error en la expresión, debe ser de tipo lógico y es de tipo: " + exp.getTipo());
	}
:};

rellenoifFuncion ::=  ALTERNATIVASI DELIMFUNC  listaSentenciasFuncion | epsilon ;
rellenoif ::=  ALTERNATIVASI DELIMFUNC  listaSentencias | epsilon ;

// for 
sentenciafor ::= COMIENZOBUCLEPARA IDEN:id RANGOBUCLEPARA expresion:exp1 RANGO expresion:exp2 DELIMFUNC listaSentencias FINBLOQUESENTENCIAS COMIENZOBUCLEPARA DSENTENCIAS
{:
	if(scopeManager.containsSymbol(id.getLexema())){
		if(scopeManager.searchSymbol(id.getLexema()).getType().getName() == "ENTERO"){
			if (exp1.getTipo() == "ENTERO" && exp2.getTipo() == "ENTERO"){
				Sentencia s = new Sentencia();
				RESULT = s;
			} else {
				semanticErrorManager.semanticFatalError("Error en los tipos de las expresiones. El tipo de la expresion de comienzo es " + exp1.getTipo() + " y el de la final es " + exp2.getTipo());
			}
		} else {
			semanticErrorManager.semanticFatalError("El tipo del índice " + id.getLexema() + " no es ENTERO, es de tipo " + scopeManager.searchSymbol(id.getLexema()).getType().getName());
		}
	} else {
		semanticErrorManager.semanticFatalError("El índice " + id.getLexema() + " no está declarado");
	}
:};
sentenciaforFuncion ::= COMIENZOBUCLEPARA IDEN:id RANGOBUCLEPARA expresion:exp1 RANGO expresion:exp2 DELIMFUNC listaSentenciasFuncion FINBLOQUESENTENCIAS COMIENZOBUCLEPARA DSENTENCIAS
{:
	if(scopeManager.containsSymbol(id.getLexema())){
		if(scopeManager.searchSymbol(id.getLexema()).getType().getName() == "ENTERO"){
			if (exp1.getTipo() == "ENTERO" && exp2.getTipo() == "ENTERO"){
				Sentencia s = new Sentencia();
				RESULT = s;
			} else {
				semanticErrorManager.semanticFatalError("Error en los tipos de las expresiones. El tipo de la expresion de comienzo es " + exp1.getTipo() + " y el de la final es " + exp2.getTipo());
			}
		} else {
			semanticErrorManager.semanticFatalError("El tipo del índice " + id.getLexema() + " no es ENTERO, es de tipo " + scopeManager.searchSymbol(id.getLexema()).getType().getName());
		}
	} else {
		semanticErrorManager.semanticFatalError("El índice " + id.getLexema() + " no está declarado");
	}
:};


// Escribir 
parametroEscribir ::= STRING:string
{:
	Expresion exp = new Expresion ("STRING" , string.getLexema());
	RESULT = exp;
	
:} 
| expresion:exp
{:
	RESULT = exp;
:}
 | epsilon:ep
 {:
 	Expresion exp = new Expresion("STRING" , null);
 	RESULT = exp;
 :};
sentenciaEscribir ::= ESCRIBIR PIZQUIERDO parametroEscribir:parametro PDERECHO DSENTENCIAS
{:	
	if (parametro.getTipo() == null) {
		semanticErrorManager.semanticFatalError("El parametro " + parametro.getValor() + " no está declarado");
	} else {	
		if (parametro.getTipo().equals("STRING") || parametro.getTipo().equals("ENTERO")){
				Sentencia s = new Sentencia();
				RESULT = s;
		} else {
			semanticErrorManager.semanticFatalError("Error en el parametro de tipo " + parametro.getTipo() + " de la sentencia escribir");
		}
	}
:};

// Devolver
sentenciaDevolver ::= FRETURN expresion:exp DSENTENCIAS
{:
	Sentencia s = new Sentencia();
	s.setTipo(exp.getTipo());
	RESULT = s;
:};



