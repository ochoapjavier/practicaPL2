package compiler.syntax;

// Declaración de importaciones 
//(No modificar las proporcionadas. Se pueden agregar mas)

import java_cup.runtime.Symbol;
import java.util.*;

import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;

import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

// Declaración del código de usuario

action code {:
	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();

:}	

parser code {:
	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}
:}

// Declaración de terminales

terminal Token RANGO;
terminal Token ASIGNACIONVECTOR;
terminal Token STARTIF;
terminal Token NOLOGICO;
terminal Token FRETURN;
terminal Token COMIENZOPROGRAMA;
terminal Token ENTERO;
terminal Token FINBLOQUESENTENCIAS;
terminal Token COMIENZOPROCEDIMIENTO;
terminal Token COMIENZOBUCLEPARA;
terminal Token BOOLEANO;
terminal Token COMIENZOSI;
terminal Token DECLVECTOR;
terminal Token CIZQUIERDO;
terminal Token DECLAREFUNCION;
terminal Token CDERECHO;
terminal Token IDEN;
terminal Token IGUALDAD;
terminal Token ALTERNATIVASI;
terminal Token DECLVARIABLES;
terminal Token STRING;
terminal Token FALSO;
terminal Token PARAMETROVALOR;
terminal Token PIZQUIERDO;
terminal Token PDERECHO;
terminal Token CIERTO;
terminal Token RANGOBUCLEPARA;
terminal Token PRODUCTO;
terminal Token SUMA;
terminal Token COMIENZOSUBPROGRAMAS;
terminal Token COMIENZODECLTIPOS;
terminal Token DIDENTIFICADORES;
terminal Token FINPROGRAMA;
terminal Token BCONSTANTES;
terminal Token ESCRIBIR;
terminal Token NUM;
terminal Token COMIENZO;
terminal Token YLOGICA;
terminal Token DELIMFUNC;
terminal Token DSENTENCIAS;
terminal Token MENORQUE;
terminal Token ASIGNACION;




// Declaración de no terminales


non terminal  			program;
non terminal Axiom		axiom;
non terminal  			epsilon;
non terminal  			defconstantes;
non terminal Constante 	valorconstante;
non terminal  			seccionconstantes;
non terminal Vect		deftipos;
non terminal TipoVector	tipovector;
non terminal Constante	valorango;
non terminal  			secciontipos;
non terminal  			defvariables;
non terminal 			tipovariable;
non terminal  			listavariables;
non terminal  			seccionvariables;
non terminal  			defsubprograma;
non terminal			puntoycomaopcional;

non terminal 			tiporetornofuncion;
non terminal  			seccionsubprograma;
non terminal  			defprincipal;
non terminal			selectorvalororeferencia;


non terminal			expresion;
non terminal			expresionlvl2;
non terminal			expresionlvl3;
non terminal			expresionlvl4;
non terminal			expresionlvl5;




non terminal			miembrovector;
non terminal			procedimiento;
non terminal			funcion;
non terminal			selectorpof;

non terminal            parametrofuncionoproc;
non terminal 			llamadafuncion ; 

non terminal 			parteizquierdaasignacion;  
non terminal 			sentenciadeasignacion;

non terminal 			parametroEscribir ;
non terminal 			sentenciaEscribir ;

non terminal 			sentencia;
non terminal 			sentenciaFuncion;
non terminal 			listaSentencias;
non terminal 			listaSentenciasFuncion;
non terminal 			sentenciaif;
non terminal 			sentenciaifFuncion;
non terminal 			rellenoif;
non terminal 			rellenoifFuncion;
non terminal 			sentenciafor;
non terminal 			sentenciaforFuncion;
non terminal 			sentenciaDevolver;


non terminal			parametroasignacion;

non terminal			sentenciallamadafuncion;





// Declaración de relaciones de precedencia
precedence left		PIZQUIERDO, PDERECHO, YLOGICA, MENORQUE, IGUALDAD, CIZQUIERDO, CDERECHO, SUMA, PRODUCTO;	
precedence right	NOLOGICO;

// Declaración de reglas de producción

start with program;

program ::= 
  {: 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   :}
  axiom:ax
  {: 
  		// No modificar esta estructura, aunque se pueden aï¿½adir mï¿½s acciones semï¿½nticas
  		
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);

  		// En caso de no comentarse las dos sentencias anteriores puede generar una excepcion
  		// en las llamadas a cupTest si el compilador no estÃ¡ completo. Esto es debido a que 
  		// aÃºn no se tendrÃ¡ implementada la generaciÃ³n de cÃ³digo intermedio ni final.
  		// Para la entrega final deberÃ¡n descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   :};

axiom ::= defprincipal;

epsilon ::=;

// Definición de programa principal
defprincipal ::= COMIENZOPROGRAMA IDEN:id
{:
	//Creamos el ámbito global con el nombre del programa principal
	String nombre = id.getLexema();
	scopeManager.openScope(nombre);
	ScopeIF scope = scopeManager.getCurrentScope();
	
	//Para comprobar el nombre del ámbito...
	System.out.println("El nombre del nuevo ámbito es :" + scope.getName());
	
	//Para comprobar el nivel del ámbito...
	System.out.println("El nivel del nuevo ámbito es :" + scope.getLevel());
	
	//Obtenemos del ámbito creado la Tabla de Tipos
	TypeTableIF typeTable = scope.getTypeTable();
	
	//Introducción del Tipo Simple Entero o Integer y Lógico o Booleano
	TypeSimple tsEntero = new TypeSimple(scope, "ENTERO");
	typeTable.addType("ENTERO", tsEntero);
	TypeSimple tsLogico = new TypeSimple(scope, "LOGICO");
	typeTable.addType("LOGICO", tsLogico);
:} DELIMFUNC seccionconstantes secciontipos seccionvariables seccionsubprograma COMIENZO listaSentencias FINBLOQUESENTENCIAS FINPROGRAMA;

//Definición de constantes
defconstantes ::=   IDEN:id ASIGNACION valorconstante:valor DSENTENCIAS {:
	//Recuperamos el ámbito dinde nos encontramos y obtenemos la tabla de sï¿½mbolos
	ScopeIF scope = scopeManager.getCurrentScope();
	SymbolTableIF tablaSimbolos = scope.getSymbolTable();
	
	//Comprobamos que la constante no este ya contenida en la tabla de sï¿½mbolos
	if(tablaSimbolos.containsSymbol(id.getLexema())){
		semanticErrorManager.semanticFatalError("Constante " +id.getLexema() + " en linea " + id.getLine() + " ya declarada");
	} else {
		System.out.println("Constante " +id.getLexema() + " en linea " + id.getLine() + " aún No declarada");	
		
		//Introducimos en la tabla de símbolos la constante con su ámbito, nombre, tipo y valor
		TypeTableIF tablaTipos = scope.getTypeTable();
		TypeIF tipo = scopeManager.searchType(valor.getTipo());
		
		SymbolConstant simboloConstante = new SymbolConstant(scope, id.getLexema(), tipo);
		simboloConstante.setValor(valor.getValor());
		tablaSimbolos.addSymbol(simboloConstante);	
	}
:} defconstantes 

| epsilon;
 
valorconstante ::=   FALSO 
{:
	Constante c = new Constante("LOGICO", "false");
	RESULT = c;							
:} 
| CIERTO 
{:
	Constante c = new Constante("LOGICO", "true");
	RESULT = c;							
:}
| NUM:n
{:
	Constante c = new Constante("ENTERO", n.getLexema());
	RESULT = c;							
:};

seccionconstantes ::= BCONSTANTES defconstantes | epsilon;

/*--------------------------------------------------------------------------*/


// Definición de tipos (nombreTipo = vector [n1..n2] de TipoPrimitivo;)
deftipos ::=IDEN:id ASIGNACION DECLVECTOR CIZQUIERDO valorango:v1 RANGO valorango:v2 CDERECHO ASIGNACIONVECTOR tipovector:tipoV  DSENTENCIAS deftipos 
{:
	if (Integer.parseInt(v1.getValor()) > Integer.parseInt(v2.getValor())) {
		//Dar error
		semanticErrorManager.semanticFatalError("Error fatal, parametros equivocados en el rango del vector");
	} else {
		//CREAR VECTOR CON PARAMETROS
		ScopeIF scope = scopeManager.getCurrentScope();
		TypeTableIF typeTable = scope.getTypeTable();
		
		if(typeTable.containsType(id.getLexema())){
			semanticErrorManager.semanticFatalError("El identificador "+id.getLexema()+ " en la línea "+id.getLine()+" ya está en uso");
		} else {
			TypeIF tipo = scopeManager.searchType(tipoV.getTipo());
			//Crear TypeArray
			TypeArray array = new TypeArray (scope, id.getLexema(), Integer.parseInt(v1.getValor()), Integer.parseInt(v2.getValor()), tipoV.getTipo());
			typeTable.addType(array);
		}
	}
:}
| epsilon;

tipovector ::= BOOLEANO 
{: 
	TipoVector tv = new TipoVector("LOGICO");
	RESULT = tv;
:} 
				
| ENTERO 
{: 
	TipoVector tv = new TipoVector("ENTERO");
	RESULT = tv;
:};


valorango ::= NUM:r 
{: 
	Constante c = new Constante("ENTERO", r.getLexema());
	RESULT = c;	
:} 

| IDEN:r 
{:
	ScopeIF scope = scopeManager.getCurrentScope();
	SymbolTableIF sTable = scope.getSymbolTable();
	if (sTable.containsSymbol(r.getLexema())){
	
		//Si la tabla de símbolos contiene el símbolo
		SymbolIF simbolo = scopeManager.searchSymbol(r.getLexema());
		if (simbolo instanceof SymbolConstant) {
			SymbolConstant constante = (SymbolConstant) simbolo;
			if (simbolo.getType().getName().toString().equals("ENTERO")) {
				Constante c = new Constante("ENTERO", constante.getValor());
				RESULT = c;	
			} else {
				semanticErrorManager.semanticFatalError("Error fatal, el simbolo "+r.getLexema()+" no es de tipo ENTERO, necesario para el vector");
			}
		}
	} else {
		semanticErrorManager.semanticFatalError("Error fatal, el simbolo "+r.getLexema()+" no está definido");
	}
:}
| miembrovector;
secciontipos ::= COMIENZODECLTIPOS deftipos | epsilon; 

/*--------------------------------------------------------------------------*/

// Definición de variables
tipovariable ::= BOOLEANO | ENTERO | IDEN;

selectorvalororeferencia ::=  PARAMETROVALOR IDEN |expresion ;
defvariables ::= listavariables DELIMFUNC tipovariable puntoycomaopcional defvariables | epsilon; 
listavariables ::= selectorvalororeferencia DIDENTIFICADORES listavariables | selectorvalororeferencia | epsilon ;
seccionvariables ::= DECLVARIABLES defvariables | epsilon  ;
puntoycomaopcional ::= DSENTENCIAS | epsilon;

/*--------------------------------------------------------------------------*/

// Reglas de subprogramas
tiporetornofuncion ::= IDEN | tipovector ;
procedimiento ::= COMIENZOPROCEDIMIENTO IDEN:id PIZQUIERDO defvariables PDERECHO DELIMFUNC seccionconstantes secciontipos seccionvariables seccionsubprograma COMIENZO sentencia listaSentencias FINBLOQUESENTENCIAS DSENTENCIAS
{:
	ScopeIF scope = scopeManager.getCurrentScope();
	SymbolTableIF symbolTable = scope.getSymbolTable();
	TypeTableIF typeTable = scope.getTypeTable();
	
	if (typeTable.containsType(id.getLexema()) || symbolTable.containsSymbol(id.getLexema())) {
		 
		System.out.println("\nEstoy en IF\n");
		
		semanticErrorManager.semanticFatalError("Error al declarar la funcion "+id.getLexema()+", ya ha sido declarada");
		
    } else {
    	System.out.println("\nEstoy en ELSE\n");
    	
    	// Insertar tabla tipos y tabla simbolos para la funciï¿½n		
		ScopeIF scopeP = scopeManager.getCurrentScope();
		SymbolTableIF symbolTableP = scopeP.getSymbolTable();
		TypeTableIF typeTableP = scopeP.getTypeTable();
		
		// Crear Tipo y Simbolo de la Función
		TypeProcedure tipoProcedure = new TypeProcedure(scope, id.getLexema());		
		typeTableP.addType(id.getLexema(), tipoProcedure);
		SymbolProcedure simboloProcedimiento = new SymbolProcedure(scope, id.getLexema(), typeTableP.getType(id.getLexema()));
        
        symbolTableP.addSymbol(id.getLexema(),simboloProcedimiento);
		syntaxErrorManager.syntaxInfo("Procedimiento en las tablas: "+id.getLexema());
		
		//Crear ambito para la función
		ScopeIF scopeF = scopeManager.openScope (id.getLexema());
		SymbolTableIF symbolTableF = scopeF.getSymbolTable();
		TypeTableIF typeTableF = scopeF.getTypeTable();
	
				
	
		//Para comprobar el nombre del ámbito...
		System.out.println("El nombre del nuevo ámbito es :" + scopeF.getName());
		
		//Para comprobar el nivel del ámbito...
		System.out.println("El nivel del nuevo ámbito es :" + scopeF.getLevel());
		
		//Cierra el ámbito del procedimiento (scopeF)
		scopeManager.closeScope();	
    }
	
	
:};

funcion ::= DECLAREFUNCION IDEN:id PIZQUIERDO defvariables PDERECHO DELIMFUNC tiporetornofuncion DELIMFUNC seccionconstantes secciontipos seccionvariables seccionsubprograma COMIENZO sentenciaFuncion listaSentenciasFuncion FINBLOQUESENTENCIAS DSENTENCIAS
{:
	ScopeIF scope = scopeManager.getCurrentScope();
	SymbolTableIF symbolTable = scope.getSymbolTable();
	TypeTableIF typeTable = scope.getTypeTable();
	
	if (typeTable.containsType(id.getLexema()) || symbolTable.containsSymbol(id.getLexema())) {
		 
		System.out.println("\nEstoy en IF\n");
		
		semanticErrorManager.semanticFatalError("Error al declarar la funcion "+id.getLexema()+", ya ha sido declarada");
		
    } else {
    	System.out.println("\nEstoy en ELSE\n");
    	
    	// Insertar tabla tipos y tabla simbolos para la función		
		ScopeIF scopeP = scopeManager.getCurrentScope();
		SymbolTableIF symbolTableP = scopeP.getSymbolTable();
		TypeTableIF typeTableP = scopeP.getTypeTable();
		
		// Crear Tipo y Simbolo de la Función
		TypeFunction tipoFuncion = new TypeFunction(scope, id.getLexema());		
		typeTableP.addType(id.getLexema(), tipoFuncion);
		SymbolFunction simboloFuncion = new SymbolFunction(scope, id.getLexema(), typeTableP.getType(id.getLexema()));
        
        symbolTableP.addSymbol(id.getLexema(),simboloFuncion);
		syntaxErrorManager.syntaxInfo("Funcion en las tablas: "+id.getLexema());
		
		//Crear ambito para la función
		ScopeIF scopeF = scopeManager.openScope (id.getLexema());
		SymbolTableIF symbolTableF = scopeF.getSymbolTable();
		TypeTableIF typeTableF = scopeF.getTypeTable();
	
				
	
		//Para comprobar el nombre del ámbito...
		System.out.println("El nombre del nuevo ámbito es :" + scopeF.getName());
		
		//Para comprobar el nivel del ámbito...
		System.out.println("El nivel del nuevo ámbito es :" + scopeF.getLevel());
				
		System.out.println("Cerrando el ámbito :" + scopeP.getName());
		scopeManager.closeScope();	
    }
:};

selectorpof ::= procedimiento | funcion ;
defsubprograma ::=selectorpof  defsubprograma | epsilon ;
seccionsubprograma ::=COMIENZOSUBPROGRAMAS  defsubprograma  | epsilon ;

// Expresiones
expresion ::=  expresion MENORQUE  expresion |  expresion IGUALDAD  expresion | IDEN | llamadafuncion | CIERTO | FALSO | miembrovector | NUM | expresionlvl2;
expresionlvl2 ::=  expresion SUMA expresion | expresionlvl3 ;
expresionlvl3 ::=  expresion YLOGICA expresion |  expresion PRODUCTO expresion | expresionlvl4;
expresionlvl4 ::= NOLOGICO  expresion | expresionlvl5 ;
expresionlvl5 ::= PIZQUIERDO expresion PDERECHO | CIZQUIERDO expresion CDERECHO  ;

// Acceso a vectores
miembrovector::= IDEN CIZQUIERDO valorango CDERECHO;
 
// Sentencias de asignacion
parteizquierdaasignacion ::= IDEN |miembrovector  ;
sentenciadeasignacion ::= parteizquierdaasignacion ASIGNACION parametroasignacion DSENTENCIAS; 
parametroasignacion ::= expresion ;

// Llamada a función
parametrofuncionoproc ::=     listavariables ;
llamadafuncion ::= IDEN PIZQUIERDO parametrofuncionoproc PDERECHO;  
sentenciallamadafuncion ::= llamadafuncion DSENTENCIAS;


// Sentencias
sentencia ::= sentenciadeasignacion | sentenciaif | sentenciafor | sentenciaEscribir | sentenciallamadafuncion ;
sentenciaFuncion ::= sentenciadeasignacion | sentenciaifFuncion | sentenciaforFuncion | sentenciaEscribir | sentenciallamadafuncion | sentenciaDevolver;
listaSentencias ::= sentencia  listaSentencias | epsilon;
listaSentenciasFuncion ::= sentenciaFuncion listaSentenciasFuncion | epsilon;

// if
sentenciaif ::= COMIENZOSI expresion  STARTIF DELIMFUNC listaSentencias rellenoif  FINBLOQUESENTENCIAS COMIENZOSI DSENTENCIAS ;
sentenciaifFuncion ::= COMIENZOSI expresion  STARTIF DELIMFUNC listaSentenciasFuncion rellenoifFuncion  FINBLOQUESENTENCIAS COMIENZOSI DSENTENCIAS ;
rellenoifFuncion ::=  ALTERNATIVASI DELIMFUNC  listaSentenciasFuncion | epsilon ;
rellenoif ::=  ALTERNATIVASI DELIMFUNC  listaSentencias | epsilon ;

// for 
sentenciafor ::= COMIENZOBUCLEPARA IDEN RANGOBUCLEPARA expresion RANGO expresion DELIMFUNC listaSentencias FINBLOQUESENTENCIAS COMIENZOBUCLEPARA DSENTENCIAS;
sentenciaforFuncion ::= COMIENZOBUCLEPARA IDEN RANGOBUCLEPARA expresion RANGO expresion DELIMFUNC listaSentenciasFuncion FINBLOQUESENTENCIAS COMIENZOBUCLEPARA DSENTENCIAS;


// Escribir 
parametroEscribir ::= STRING | expresion | epsilon ;
sentenciaEscribir ::= ESCRIBIR PIZQUIERDO parametroEscribir PDERECHO DSENTENCIAS;

// Devolver
sentenciaDevolver ::= FRETURN expresion DSENTENCIAS;



